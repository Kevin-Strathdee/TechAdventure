schema {
  query: RootQueryType
  mutation: RootMutationType
}

"""
A geometry
"""
type Geometry {
  mapLayer: MapLayer!
  x: Float!
  y: Float!
}

"""
The map of a geometry
"""
enum MapLayer {
  """
  Erfurt
  """
  ERFURT_1

  """
  Leipzig 1st floor
  """
  LEIPZIG_1

  """
  Leipzig 2nd floor
  """
  LEIPZIG_2

  """
  Leipzig 3rd floor
  """
  LEIPZIG_3

  """
  Munich 13th floor
  """
  MUNICH_13

  """
  Munich 4th floor
  """
  MUNICH_4

  """
  Munich 5th floor
  """
  MUNICH_5

  """
  Munich 6th floor
  """
  MUNICH_6

  """
  Stuttgart
  """
  STUTTGART_6

  """
  Yerevan 2nd floor
  """
  YEREVAN_2

  """
  Yerevan 3nd floor
  """
  YEREVAN_3
}

"""
Information for a minigame
"""
type Minigame {
  score: Int!
  type: String!
}

"""
Result of a minigame
"""
type MinigameOutcome {
  place: Place!
  reward: Int!
}

type RootMutationType {
  """
  The result of a minigame
  """
  minigameOutcome(placeId: ID!, score: Int!): MinigameOutcome!
}

"""
A place
"""
type Place {
  geometry: Geometry
  id: ID!
  image: String
  minigame: Minigame!
  name: String!
  owner: User
  type: String!
}

type RootQueryType {
  """
  Finds all places or a place by id
  """
  place(placeId: ID): [Place!]!

  """
  Finds all users or a user by id
  """
  user(userId: ID): [User!]!

  """
  Finds all users or a user by id
  """
  currentUser(): User!
}

"""
A user
"""
type User {
  email: String!
  id: ID!
  name: String!
  places: [Place!]!
  score: Int!
  username: String!
  rank: Int!
}
